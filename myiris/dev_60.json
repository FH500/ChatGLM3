{"prompt": "在“1990-2018年中国区域创新创业指数-城市.xlsx”文件中，“地级市”的sheet列名从第一行开始，列名包含年份、地级市、总量指数得分、人均得分、单位面积得分、新建企业进入、外来投资笔数、vcpe投资数目、发明专利授权数目、实用新型专利公开数目、外观专利公开数目、商标授权数目。请用条形图展示2014年各地级市外观专利公开数目的分布情况", "response": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# 文件路径\nfile_path = \"1990-2018年中国区域创新创业指数-城市.xlsx\"\n# 表格名称\nsheet_name = \"地级市\"\n\n# 读取Excel文件\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\n# 筛选2014年的数据\ndf_2014 = df.loc[df['年份'] == 2014]\n\n# 使用条形图展示2014年各地级市外观专利公开数目的分布情况\nplt.figure(figsize=(12, 8))\nplt.bar(df_2014['地级市'], df_2014['外观专利公开数目'], color='orange')\nplt.xlabel('地级市')\nplt.ylabel('外观专利公开数目')\nplt.title('2014年各地级市外观专利公开数目分布情况')\nplt.xticks(rotation=45, ha='right')\nplt.show()"}
{"prompt":"在“1990-2018年中国区域创新创业指数-城市.xlsx”文件中，“地级市”的sheet列名从第一行开始，列名包含年份、地级市、总量指数得分、人均得分、单位面积得分、新建企业进入、外来投资笔数、vcpe投资数目、发明专利授权数目、实用新型专利公开数目、外观专利公开数目、商标授权数目。请找到2012年南京市的新建企业进入数量。","response":"import pandas as pd\n\n# 文件路径\nfile_path = \"1990-2018年中国区域创新创业指数-城市.xlsx\"\n# 表格名称\nsheet_name = \"地级市\"\n\n# 读取Excel文件\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\n# 查找2012年南京市的新建企业进入数量\nnanjing_new_enterprises_2012 = df.loc[(df['年份'] == 2012) & (df['地级市'] == '南京市'), '新建企业进入'].values[0]\n\n# 输出结果\nprint(\"2012年南京市的新建企业进入数量是:\", nanjing_new_enterprises_2012)"}
{"prompt":"在“分项地区生产总值.xlsx”文件中，“分省年度数据”的sheet列名从第一行开始，列名包含地区及1996年到2015年。请得到湖北省1996年至2000年的生产总值的期望值。","response":"import pandas as pd\n\n# 文件路径\nfile_path = \"分项地区生产总值.xlsx\"\n# 表格名称\nsheet_name = \"分省年度数据\"\n\n# 读取Excel文件\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\n# 计算湖北省1996年至2000年的生产总值的平均值\nhubei_gdp_avg_1996_to_2000 = df.loc[df['地区'] == '湖北省', ['1996年', '1997年', '1998年', '1999年', '2000年']].mean(axis=1).values[0]\n\n# 输出结果\nprint(\"湖北省1996年至2000年的生产总值的平均值是:\", hubei_gdp_avg_1996_to_2000)"}
{"prompt":"在“数字创新指数2010-2020-省级.xlsx”文件中，“省级”的sheet列名从第一行开始，列名包括省份、年份、总量指数得分、总量指数排名、新建企业数量得分、新建企业数量排名、吸引外来投资得分、吸引外来投资排名。请将2010年总量指数得分求平均。","response":"import pandas as pd\n\n# 读取Excel文件\nfile_path = \"数字创新指数2010-2020-省级.xlsx\"\nsheet_name = \"省级\"\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\n# 计算2010年总量指数得分的平均值\naverage_total_score_2010 = df.loc[df['年份'] == 2010, '总量指数得分'].mean()\naverage_total_score_2010"}
{"prompt":"在“数字创新指数2010-2020-省级.xlsx”文件中，“省级”的sheet列名从第一行开始，列名包括省份、年份、总量指数得分、总量指数排名、新建企业数量得分、新建企业数量排名、吸引外来投资得分、吸引外来投资排名。请给出广东省2018年的新建企业数量排名。","response":"import pandas as pd\n\n# 读取Excel文件\nfile_path = \"数字创新指数2010-2020-省级.xlsx\"\nsheet_name = \"省级\"\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\n# 查询广东省2018年的新建企业数量排名\nguangdong_rank_2018 = df.loc[(df['省份'] == '广东省') & (df['年份'] == 2018), '新建企业数量排名'].values[0]\nprint(f\"广东省2018年的新建企业数量排名是: {guangdong_rank_2018}\")"}
{"prompt":"在“数字创新指数2010-2020-省级.xlsx”文件中，“省级”的sheet列名从第一行开始，包括省份、年份、总量指数得分、总量指数排名、新建企业数量得分、新建企业数量排名、吸引外来投资得分、吸引外来投资排名。请把上海市2015年的总量指数得分展现出来","response":"import pandas as pd\n\n# 读取Excel文件\nfile_path = \"数字创新指数2010-2020-省级.xlsx\"\nsheet_name = \"省级\"\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\n# 查询上海市2015年的总量指数得分\nshanghai_2015_score = df.loc[(df['省份'] == '上海市') & (df['年份'] == 2015), '总量指数得分'].values[0]\nprint(f\"上海市2015年的总量指数得分是：{shanghai_2015_score}\")"}
{"prompt":"在“数字创新指数2010-2020-省级.xlsx”文件中，“省级”的sheet列名从第一行开始，列名包括省份、年份、总量指数得分、总量指数排名、新建企业数量得分、新建企业数量排名、吸引外来投资得分、吸引外来投资排名。请展示2019年所有省份新建企业数量得分的中位数。","response":"import pandas as pd\n\n# 读取Excel文件\nfile_path = \"数字创新指数2010-2020-省级.xlsx\"\nsheet_name = \"省级\"\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\n# 计算2019年所有省份新建企业数量得分的中位数\nmedian_new_enterprise_2019 = df.loc[df['年份'] == 2019, '新建企业数量得分'].median()\nprint(f\"2019年所有省份新建企业数量得分的中位数是：{median_new_enterprise_2019}\")"}
{"prompt":"在“西安2014-2018空气质量.xlsx”文件中，“西安2014-2018空气质量”的sheet列名从第一行开始，列名包括日期、AQI、PM2.5、PM10、SO2、CO、NO2、O3_8h。请找到2016年NO2的众数。","response":"import pandas as pd\n\nfile_path = \"西安2014-2018空气质量.xlsx\"\nsheet_name = \"西安2014-2018空气质量\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\ndf['日期'] = df['日期'].astype(str)\n\nno2_mode_2016 = df.loc[df['日期'].str.contains('2016'), 'NO2'].mode()[0]\nprint(\"2016年的NO2众数是:\", no2_mode_2016)"}
{"prompt":"在“西安2014-2018空气质量.xlsx”文件中，“西安2014-2018空气质量”的sheet列名从第一行开始，列名包括日期、AQI、PM2.5、PM10、SO2、CO、NO2、O3_8h。请给出2018年SO2超过50的次数。","response":"import pandas as pd\n\nfile_path = \"西安2014-2018空气质量.xlsx\"\nsheet_name = \"西安2014-2018空气质量\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\ndf['日期'] = df['日期'].astype(str)\n\nso2_over_50_count_2018 = df.loc[df['日期'].str.contains('2018') & (df['SO2'] > 50), 'SO2'].count()\nprint(\"2018年SO2超过50的次数是:\", so2_over_50_count_2018)"}
{"prompt":"在“西安2014-2018空气质量.xlsx”文件中，“西安2014-2018空气质量”的sheet列名从第一行开始，列名包括日期、AQI、PM2.5、PM10、SO2、CO、NO2、O3_8h。请展示2016年SO2与AQI的关系，用散点图画出。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nfile_path = \"西安2014-2018空气质量.xlsx\"\nsheet_name = \"西安2014-2018空气质量\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\ndf['日期'] = df['日期'].astype(str)\n\nplt.scatter(df.loc[df['日期'].str.contains('2016'), 'SO2'], df.loc[df['日期'].str.contains('2016'), 'AQI'], color='orange', alpha=0.6)\nplt.title(\"2016年SO2与AQI的散点图\")\nplt.xlabel(\"SO2\")\nplt.ylabel(\"AQI\")\nplt.show()"}
{"prompt":"在“西安2014-2018空气质量.xlsx”文件中，“西安2014-2018空气质量”的sheet列名从第一行开始，列名包括日期、AQI、PM2.5、PM10、SO2、CO、NO2、O3_8h。请给出2015年O3_8h每个月的变化，画成面积图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nfile_path = \"西安2014-2018空气质量.xlsx\"\nsheet_name = \"西安2014-2018空气质量\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\ndf['日期'] = df['日期'].astype(str)\n\n# Extract month from the date\ndf['Month'] = pd.to_datetime(df['日期']).dt.month\n\n# Group by month and calculate average O3_8h\nmonthly_o3 = df.loc[df['日期'].str.contains('2015')].groupby('Month')['O3_8h'].mean()\n\n# Plot the area chart\nplt.fill_between(monthly_o3.index, monthly_o3.values, color='skyblue', alpha=0.4)\nplt.title(\"2015年O3_8h每月平均值的面积图\")\nplt.xlabel(\"月份\")\nplt.ylabel(\"O3_8h平均值\")\nplt.xticks(range(1, 13))\nplt.show()"}
{"prompt":" 在“民用汽车拥有量汇总.xlsx”文件中，“民用载货”sheet的列名从第四行开始，列名包含省份、2002年、2003年...，一直到2020年等项。请用雷达图展示2010年至2020年间全国各省“民用载货”车辆拥有量","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\nfile_name = '民用汽车拥有量汇总.xlsx'\nsheet_name = '民用载货'\ndf_cargo = pd.read_excel(file_name, sheet_name=sheet_name, engine='openpyxl', header=3)\nyears = ['2010年', '2011年', '2012年', '2013年', '2014年', '2015年', '2016年', '2017年', '2018年', '2019年', '2020年']\n\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\n\nfor province in df_cargo['省份']:\n    values = df_cargo.loc[df_cargo['省份'] == province, years].values.flatten()\n    values = np.append(values, values[0])\n    ax.plot(np.radians(np.linspace(0, 360, len(years)+1)), values, label=province)\n\nax.set_theta_offset(np.pi \/ 2)\nax.set_theta_direction(-1)\nax.set_rlabel_position(0)\nax.set_yticklabels([])\n\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\nplt.title('2010年至2020年全国各省民用载货车辆拥有量雷达图')\nplt.show()"}
{"prompt":"在“民用汽车拥有量汇总.xlsx”文件中，“民用载客”sheet的列名从第四行开始，列名包含省份、2002年、2003年...，一直到2020年等项。请用折线图展示2015年至2020年间全国各省“民用载客”车辆拥有量","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\nfile_name = '民用汽车拥有量汇总.xlsx'\ndf_passenger = pd.read_excel(file_name, sheet_name='民用载客', engine='openpyxl', header=3)\nyears = ['2015年', '2016年', '2017年', '2018年', '2019年', '2020年']\n\nfor province in df_passenger['省份']:\n    plt.plot(years, df_passenger.loc[df_passenger['省份'] == province, years].values.flatten(), label=province)\n\nplt.title('2015年至2020年全国各省民用载客车辆拥有量趋势')\nplt.xlabel('年份')\nplt.ylabel('车辆拥有量（万辆）')\nplt.legend()\nplt.show()"}
{"prompt":"在“民用汽车拥有量汇总.xlsx”文件中，“民用汽车拥有量”sheet的列名从第五行开始，列名有省份、2002年、2003年...，一直到2020年等项。在该sheet中，请用饼图展示2010年全国各省汽车拥有量的","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] =['Arial Unicode MS']\nfile_name ='民用汽车拥有量汇总.xlsx'\nsheet_name='民用汽车拥有量汇总'\ndf= pd.read_excel(file_name,sheet_name,engine='openpyxl', header=4)\nplt.pie(df['2010年'],labels=df['省份'],autopct='%1.1f%%')\nplt.title('2010年全国各省民用汽车拥有量分布')\n#确保饼图为形，避免被压缩为圆\nplt.axis('equal')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“民用汽车拥有量汇总.xlsx”文件中，“民用载客”和“民用其他”sheet的列名分别从第四行与第一行开始，列名包含省份、2002年、2003年...，一直到2020年等项。请将2015年至2020年间广东和上海的“民用载客”车辆数量与“民用其他”车辆数量作差，并比较差值的变化趋势。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\nfile_name = '民用汽车拥有量汇总.xlsx'\ndf_passenger = pd.read_excel(file_name, sheet_name='民用载客', engine='openpyxl', header=3)\ndf_other = pd.read_excel(file_name, sheet_name='民用其他', engine='openpyxl', header=0)\nyears = ['2015年', '2016年', '2017年', '2018年', '2019年', '2020年']\ncities = ['广东', '上海']\n\nplt.figure(figsize=(10, 6))\n\nfor city in cities:\n    passenger_data = df_passenger.loc[df_passenger['省份'] == city, years].values.flatten()\n    other_data = df_other.loc[df_other['省份'] == city, years].values.flatten()\n\n    difference = passenger_data - other_data\n\n    plt.plot(years, difference, label=f'{city} 民用载客 - 民用其他')\n\nplt.title('2015年至2020年间广东和上海民用载客与民用其他车辆数量差值趋势')\nplt.xlabel('年份')\nplt.ylabel('车辆数量差值（万辆）')\nplt.legend()\nplt.show()"}
{"prompt":"power_generation_2016-2020.xlsx文件中\"Sheet1\"sheet的列名从第一行开始，列名有年度、省份、火电、水电、风电、太阳能发电、核电、其他、总计。\n在该sheet中,分别查询出2018年，上海市和深圳市的太阳能发电量","response":"import pandas as pd\nfile_path = 'power_generation_2016-2020.xlsx'\ndf_sheet2 = pd.read_excel(file_path, sheet_name='Sheet1', header=0)\nyear = 2018\ncity_shanghai = '上海市'\ncity_shenzhen = '广东省'\nsolar_generation_shanghai = df_sheet2.loc[(df_sheet2['年度'] == year) & (df_sheet2['省份'] == city_shanghai), '太阳能发电'].values[0]\nsolar_generation_shenzhen = df_sheet2.loc[(df_sheet2['年度'] == year) & (df_sheet2['省份'] == city_shenzhen), '太阳能发电'].values[0]\nprint(f'{year}年，{city_shanghai}的太阳能发电量为: {solar_generation_shanghai}万千瓦时')\nprint(f'{year}年，{city_shenzhen}的太阳能发电量为: {solar_generation_shenzhen}万千瓦时')"}
{"prompt":"power_generation_2016-2020.xlsx文件中\"\"Sheet1\"\"sheet的列名从第一行开始，列名有年度、省份、火电、水电、风电、太阳能发电、核电、其他、总计。在该sheet中，请用折线图展示2017年全国各类型发电量","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nfile_path = 'power_generation_2016-2020.xlsx'\ndf_2017 = pd.read_excel(file_path, sheet_name='Sheet1', header=0)\nelectricity_types = ['火电', '水电', '风电', '太阳能发电', '核电', '其他']\ndf_2017.plot(x='省份', y=electricity_types, kind='line', marker='o', figsize=(12, 6))\nplt.title('2017年全国各类型发电量变化趋势')\nplt.ylabel('发电量（万千瓦时）')\nplt.show()"}
{"prompt":"power_generation_2016-2020.xlsx文件中\"\"Sheet1\"\"sheet的列名从第一行开始，列名有年度、省份、火电、水电、风电、太阳能发电、核电、其他、总计。在该sheet中，将2020年全国核电发电量的均值、最大值和中位数呈现出来","response":"import pandas as pd\ndf = pd.read_excel('power_generation_2016-2020.xlsx', sheet_name='Sheet1', header=0)\nstats_nuclear_power = df[df['年度'] == 2020]['核电'].agg(['mean', 'max', 'median'])\nprint(stats_nuclear_power)"}
{"prompt":"power_generation_2016-2020.xlsx文件中\"\"Sheet1\"\"sheet的列名从第一行开始，列名有年度、省份、火电、水电、风电、太阳能发电、核电、其他、总计。请计算2020年全国核电发电量的均值、最大值和中位数。","response":"import pandas as pd\ndf = pd.read_excel('power_generation_2016-2020.xlsx', sheet_name='Sheet1', header=0)\nstats_nuclear_power = df[df['年度'] == 2020]['核电'].agg(['mean', 'max', 'median'])\nprint(stats_nuclear_power)"}
{"prompt":"power_generation_2016-2020.xlsx文件中\"\"Sheet1\"\"sheet的列名从第一行开始，列名有年度、省份、火电、水电、风电、太阳能发电、核电、其他、总计。在该sheet中，用饼图展示2020年全国核电发电量。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nfile_path = 'power_generation_2016-2020.xlsx'\ndf_2020_nuclear = pd.read_excel(file_path, sheet_name='Sheet1', header=0)\ntotal_nuclear_generation_2020 = df_2020_nuclear[df_2020_nuclear['年度'] == 2020]['核电'].sum()\nplt.figure(figsize=(8, 8))\nplt.pie([total_nuclear_generation_2020, df_2020_nuclear['其他'].sum()],\n        labels=['核电', '其他'],\n        autopct='%1.1f%%',\n        startangle=90)\nplt.title('2020年全国核电发电量占比')\nplt.show()"}
{"prompt":"在“理想房型.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包含编号、城市（北京、上海、广州、深圳）、租价、纬度、经度、房间面积、屋子数量、街道长度、街道名称。请用散点图展示出租价与房间面子的相关性。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# 读取 Excel 文件中名为“Sheet1”的工作表\nfile_path = \"理想房型.xlsx\"\nsheet_name = \"Sheet1\"\ndf = pd.read_excel(file_path, sheet_name)\n\n# 计算租价与房间面积的相关性\ncorrelation = df['租价'].corr(df['房间面积'])\n\n# 绘制散点图\nplt.figure(figsize=(10, 6))\nplt.scatter(df['房间面积'], df['租价'], alpha=0.5)\nplt.title(f\"租价与房间面积的相关性 (相关系数: {correlation:.2f})\")\nplt.xlabel(\"房间面积\")\nplt.ylabel(\"租价\")\nplt.show()"}
{"prompt":"在“理想房型.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包含编号、城市（北京、上海、广州、深圳）、租价、纬度、经度、房间面积、屋子数量、街道长度、街道名称。把广州房间租价最高的房子编号与所在街道名称查询出来。","response":"import pandas as pd\nfile_path = \"理想房型.xlsx\"\nsheet_name = \"Sheet1\"\ndf = pd.read_excel(file_path, sheet_name, header=0)\nguangzhou_data = df[df['城市'] == '广州']\nmax_rent_row = guangzhou_data.loc[guangzhou_data['租价'].idxmax()]\nroom_number = max_rent_row['编号']\nstreet_name = max_rent_row['街道名称']\nprint(f\"广州租价最高的房子编号为 {room_number}，所在街道名称为 {street_name}\")"}
{"prompt":"在“理想房型.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包含编号、城市（北京、上海、广州、深圳）、租价、纬度、经度、房间面积、屋子数量、街道长度、街道名称。请计算北京屋子数量的总和。","response":"import pandas as pd\nfile_path = \"理想房型.xlsx\"\nsheet_name = \"Sheet1\"\ndf = pd.read_excel(file_path, sheet_name)\nbeijing_data = df[df['城市'] == '北京']\ntotal_house_count = beijing_data['屋子数量'].sum()\nprint(f\"北京屋子数量的总和为 {total_house_count}\")"}
{"prompt":"在“理想房型.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包含编号、城市（北京、上海、广州、深圳）、房间面积、屋子数量、街道长度、街道名称。查询广州房间面积最小的房子编号与所在街道名称。","response":"import pandas as pd\nfile_path = \"理想房型.xlsx\"\nsheet_name = \"Sheet1\"\ndf = pd.read_excel(file_path, sheet_name, header=0)\nguangzhou_data = df[df['城市'] == '广州']\nmin_area_row = guangzhou_data.loc[guangzhou_data['房间面积'].idxmin()]\nroom_number = min_area_row['编号']\nstreet_name = min_area_row['街道名称']\nprint(f\"广州房间面积最小的房子编号为 {room_number}，所在街道名称为 {street_name}\")"}
{"prompt":"在“2015年地区数据对比.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包括地区、生产总值、电话普及率、教育经费收入、年末常住人口（万人）。请用柱状图展现各地区生产总值。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nfile_path = \"2015年地区数据对比.xlsx\"\nsheet_name = \"Sheet1\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\nplt.bar(df['地区'], df['生产总值'])\nplt.title(\"各地区2015年生产总值柱状图\")\nplt.xlabel(\"地区\")\nplt.ylabel(\"生产总值\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.show()"}
{"prompt":"在“2015年地区数据对比.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包括地区、生产总值、电话普及率、教育经费收入、年末常住人口（万人）。请计算全国各地区的生产总值平均值。","response":"import pandas as pd\n\nfile_path = \"2015年地区数据对比.xlsx\"\nsheet_name = \"Sheet1\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\nnational_avg_gdp = df['生产总值'].mean()\n\nprint(\"全国各地区的生产总值平均值是:\", national_avg_gdp)"}
{"prompt":"在“2015年地区数据对比.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包括地区、生产总值、电话普及率、教育经费收入、年末常住人口（万人）。请统计各地区教育经费收入小于200亿元的数量。","response":"import pandas as pd\n\nfile_path = \"2015年地区数据对比.xlsx\"\nsheet_name = \"Sheet1\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\nlow_education_fund_count = df[df['教育经费收入'] < 200]['地区'].count()\nprint(\"教育经费收入小于200亿元的地区数量是:\", low_education_fund_count)"}
{"prompt":"在“2015年地区数据对比.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包括地区、生产总值、电话普及率、教育经费收入、年末常住人口（万人）。请计算各地区生产总值的最小值。","response":"import pandas as pd\n\nfile_path = \"2015年地区数据对比.xlsx\"\nsheet_name = \"Sheet1\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\ngdp_min = df['生产总值'].min()\nprint(\"各地区生产总值的最小值是:\", gdp_min)"}
{"prompt":"在“2015年地区数据对比.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包括地区、生产总值、电话普及率、教育经费收入、年末常住人口（万人）。请将各地区年末常住人口的最小值展示出来。","response":"import pandas as pd\n\nfile_path = \"2015年地区数据对比.xlsx\"\nsheet_name = \"Sheet1\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\npopulation_min = df['年末常住人口（万人）'].min()\nprint(\"各地区年末常住人口的最小值是:\", population_min)"}
{"prompt":"在“2015年地区数据对比.xlsx”文件中，“Sheet1”的sheet列名从第一行开始，列名包括地区、生产总值、电话普及率、教育经费收入、年末常住人口（万人）。请问广西省的年末常住人口是多少。","response":"import pandas as pd\n\nfile_path = \"2015年地区数据对比.xlsx\"\nsheet_name = \"Sheet1\"\n\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\nguangxi_population = df.loc[df['地区'] == '广西省', '年末常住人口（万人）'].values[0]\n\nprint(\"广西省的年末常住人口是:\", guangxi_population)"}
{"prompt":"在“0204CPI环比月度数据.xlsx”文件中，“0204CPI环比月度数据”sheet的列名从第三行开始，列名包含指标、2019年1月、2018年12月、2018年11月、2018年10月、…，一直到2016年1月等项。请计算2016年至2018年，“教育文化和娱乐类居民消费价格指数(上月=100)”在所有指标中的排名，并输出排名结果。","response":"import pandas as pd\n\nfile_name = '0204CPI环比月度数据.xlsx'\ndf_cpi = pd.read_excel(file_name, sheet_name='0204CPI环比月度数据', engine='openpyxl', header=2)\n\ndf_education_culture_cpi = df_cpi[df_cpi['指标'] == '教育文化和娱乐类居民消费价格指数(上月=100)']\nrank_education_culture_cpi = df_education_culture_cpi.loc[:, '2016年1月':'2018年12月'].mean(axis=1).rank(ascending=False).values[0]\n\nprint(f\"2016年至2018年，教育文化和娱乐类居民消费价格指数在所有指标中的平均排名为：{int(rank_education_culture_cpi)}\")"}
{"prompt":"在“0204CPI环比月度数据.xlsx”文件中，“0204CPI环比月度数据”sheet的列名从第三行开始，列名包含指标、2019年1月、2018年12月、2018年11月、2018年10月、…，一直到2016年1月等项。请将2017年5月时，交通和通信类居民消费价格指数的数值查询出来。","response":"import pandas as pd\nfile_name = '0204CPI环比月度数据.xlsx'\ndf_cpi = pd.read_excel(file_name, sheet_name='0204CPI环比月度数据', engine='openpyxl', header=2)\n\nmay_2017_cpi_transport_communication = df_cpi.loc[df_cpi['指标'] == '交通和通信类居民消费价格指数(上月=100)', '2017年5月'].values[0]\nprint(f\"2017年5月时，交通和通信类居民消费价格指数为：{may_2017_cpi_transport_communication}\")"}
{"prompt":"在“0204CPI环比月度数据.xlsx”文件中，“0204CPI环比月度数据”sheet的列名从第三行开始，列名包含指标、2019年1月、2018年12月、2018年11月、2018年10月、…，一直到2016年1月等项。请计算2016年至2018年，“居住类居民消费价格指数(上月=100)”的最大值，并输出最大值结果。","response":"import pandas as pd\n\nfile_name = '0204CPI环比月度数据.xlsx'\ndf_cpi = pd.read_excel(file_name, sheet_name='0204CPI环比月度数据', engine='openpyxl', header=2)\n\ndf_residence_cpi = df_cpi[df_cpi['指标'] == '居住类居民消费价格指数(上月=100)']\nmax_cpi_residence = df_residence_cpi.loc[:, '2016年1月':'2018年12月'].max(axis=1).values[0]\n\nprint(f\"2016年至2018年，居住类居民消费价格指数的最大值为：{max_cpi_residence:.2f}\")"}
{"prompt":"在“0204CPI环比月度数据.xlsx”文件中，“0204CPI环比月度数据”sheet的列名从第三行开始，列名包含指标、2019年1月、2018年12月、2018年11月、2018年10月、…，一直到2016年1月等项。请把2017年，“食品烟酒类居民消费价格指数(上月=100)”的标准差展示出来。","response":"import pandas as pd\nfile_name = '0204CPI环比月度数据.xlsx'\ndf_cpi = pd.read_excel(file_name, sheet_name='0204CPI环比月度数据', engine='openpyxl', header=2)\n\ndf_food_cpi = df_cpi[df_cpi['指标'] == '食品烟酒类居民消费价格指数(上月=100)']\nstd_cpi_food = df_food_cpi.loc[:, '2017年12月':'2017年1月'].std(axis=1).values[0]\n\nprint(f\"2017年，食品烟酒类居民消费价格指数的标准差为：{std_cpi_food}\")"}
{"prompt":"在“0204CPI环比月度数据.xlsx”文件中，“0204CPI环比月度数据”sheet的列名从第三行开始，列名包含指标、2019年1月、2018年12月、2018年11月、2018年10月、…，一直到2016年1月等项。请计算2017年，“食品烟酒类居民消费价格指数(上月=100)”的平均增长率。","response":"import pandas as pd\nfile_name = '0204CPI环比月度数据.xlsx'\ndf_cpi = pd.read_excel(file_name, sheet_name='0204CPI环比月度数据', engine='openpyxl', header=2)\n\ndf_food_cpi = df_cpi[df_cpi['指标'] == '食品烟酒类居民消费价格指数(上月=100)']\naverage_growth_rate_food = df_food_cpi.loc[:, '2017年1月':'2017年12月'].pct_change(axis=1).mean(axis=1).values[0] * 100\n\nprint(f\"2017年，食品烟酒类居民消费价格指数的平均增长率为：{average_growth_rate_food:.2f}%\")"}
{"prompt":"在“0204CPI环比月度数据.xlsx”文件中，“0204CPI环比月度数据”sheet的列名从第三行开始，列名包含指标、2019年1月、2018年12月、2018年11月、2018年10月、…，一直到2016年1月等项。请用折线图展示每个月“居民消费价格指数(上月=100)”。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '0204CPI环比月度数据.xlsx'\ndf_cpi = pd.read_excel(file_name, sheet_name='0204CPI环比月度数据', engine='openpyxl', header=2)\n\ndf_total_cpi = df_cpi[df_cpi['指标'] == '居民消费价格指数(上月=100)']\nplt.plot(df_total_cpi.columns[2:], df_total_cpi.iloc[0, 2:], marker='o', linestyle='-')\nplt.xlabel('月份')\nplt.ylabel('居民消费价格指数')\nplt.title('每个月居民消费价格指数折线图')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“0204CPI环比月度数据.xlsx”文件中，“0204CPI环比月度数据”sheet的列名从第三行开始，列名包含指标、2019年1月、2018年12月、2018年11月、2018年10月、…，一直到2016年1月等项。请呈现出2017年至2019年，“医疗保健类居民消费价格指数(上月=100)”的平均增长率，用折线图来表示出其变化趋势。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '0204CPI环比月度数据.xlsx'\ndf_cpi = pd.read_excel(file_name, sheet_name='0204CPI环比月度数据', engine='openpyxl', header=2)\n\ndf_health_cpi = df_cpi[df_cpi['指标'] == '医疗保健类居民消费价格指数(上月=100)']\naverage_growth_rate_health = df_health_cpi.loc[:, '2017年1月':'2019年12月'].pct_change(axis=1).mean(axis=1).values[0] * 100\n\nplt.plot(df_health_cpi.columns[2:], df_health_cpi.iloc[0, 2:], marker='o', linestyle='-', label='医疗保健类居民消费价格指数')\nplt.xlabel('月份')\nplt.ylabel('指数')\nplt.title('2017年至2019年医疗保健类居民消费价格指数变化趋势')\nplt.xticks(rotation=45, ha='right')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\nprint(f\"2017年至2019年，医疗保健类居民消费价格指数的平均增长率为：{average_growth_rate_health:.2f}%\")"}
{"prompt":"在“0204CPI环比月度数据.xlsx”文件中，“0204CPI环比月度数据”sheet的列名从第三行开始，列名包含指标、2019年1月、2018年12月、2018年11月、2018年10月、…，一直到2016年1月等项。找到2016年至2018年，“医疗保健类居民消费价格指数(上月=100)”，并用箱线图展示。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '0204CPI环比月度数据.xlsx'\ndf_cpi = pd.read_excel(file_name, sheet_name='0204CPI环比月度数据', engine='openpyxl', header=2)\n\ndf_health_cpi = df_cpi[df_cpi['指标'] == '医疗保健类居民消费价格指数(上月=100)']\n\nplt.boxplot(df_health_cpi.iloc[0, 2:], vert=False)\nplt.xlabel('医疗保健类居民消费价格指数')\nplt.title('2016年至2018年医疗保健类居民消费价格指数箱线图')\nplt.show()"}
{"prompt":"在““一带一路”亚洲区国家-2015.xlsx”文件的“万得”工作表中，列名从第一行开始，包含板块\\指标、GDP十亿美元、GDP:不变价:同比%、人均GDP美元、GDP平减指数:同比%。请计算GDP:不变价:同比%列的中位数","response":"import pandas as pd\n\n# 文件路径\nfile_path = \"“一带一路”亚洲区国家-2015.xlsx\"\n# 表格名称\nsheet_name = \"万得\"\n\n# 读取Excel文件\ndf = pd.read_excel(file_path, sheet_name, header=0)\n\n# 获取GDP:不变价:同比%列的中位数\nmedian_gdp_growth_rate = df['GDP:不变价:同比%'].median()\n\n# 输出结果\nprint(\"在“一带一路”亚洲区国家-2015.xlsx的“万得”工作表中，GDP:不变价:同比%列的中位数为:\", median_gdp_growth_rate)"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。查询并输出中国2003年的城市人口比例。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nchina_population_ratio_2003 = df_population_ratio[df_population_ratio['时间'] == 2003]['城市人口比例:中国'].values[0]\n\nprint(f\"中国2003年的城市人口比例为：{china_population_ratio_2003}%\")"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。计算2003年各国的城市人口比例增长率，并找出增长率最高和最低的国家。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\n# 计算2003年各国的城市人口比例增长率\ngrowth_rates = {}\nfor country in [\"全球\", \"美国\", \"德国\", \"英国\", \"日本\", \"中国\", \"印度\", \"印度尼西亚\"]:\n    ratio_2003 = df_population_ratio[df_population_ratio['时间'] == 2003][f'城市人口比例:{country}'].values[0]\n    ratio_2002 = df_population_ratio[df_population_ratio['时间'] == 2002][f'城市人口比例:{country}'].values[0]\n    growth_rate = ((ratio_2003 - ratio_2002) \/ ratio_2002) * 100\n    growth_rates[country] = growth_rate\n\n# 找出增长率最高和最低的国家\nmax_growth_country = max(growth_rates, key=growth_rates.get)\nmin_growth_country = min(growth_rates, key=growth_rates.get)\n\nprint(f\"2003年城市人口比例增长率最高的国家是：{max_growth_country}，增长率为：{growth_rates[max_growth_country]:.2f}%\")\nprint(f\"2003年城市人口比例增长率最低的国家是：{min_growth_country}，增长率为：{growth_rates[min_growth_country]:.2f}%\")"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。画出中国从1991到2019年城市人口比例增长率的折线图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\n# 提取中国1991年到2019年的城市人口比例数据\nchina_population_ratio = df_population_ratio[df_population_ratio['时间'].between(1991, 2019)]['城市人口比例:中国']\n\n# 计算增长率\ngrowth_rate_china = ((china_population_ratio.shift(1) - china_population_ratio) \/ china_population_ratio) * 100\n\n# 画折线图\nplt.plot(df_population_ratio['时间'].loc[1:], growth_rate_china, marker='o', linestyle='-', color='b')\nplt.xlabel('年份')\nplt.ylabel('城市人口比例增长率')\nplt.title('中国1991年到2019年城市人口比例增长率折线图')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。查询并输出各国2018年的城市人口比例。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\npopulation_ratio_2018 = df_population_ratio[df_population_ratio['时间'] == 2018][['城市人口比例:全球', '城市人口比例:美国', '城市人口比例:德国', '城市人口比例:英国', '城市人口比例:日本', '城市人口比例:中国', '城市人口比例:印度', '城市人口比例:印度尼西亚']]\n\nprint(population_ratio_2018)"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。查询并输出中国1995年的城市人口比例。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nchina_population_ratio_1995 = df_population_ratio[df_population_ratio['时间'] == 1995]['城市人口比例:中国'].values[0]\n\nprint(f\"中国1995年的城市人口比例为：{china_population_ratio_1995}%\")"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。计算各国1990年至2019年的城市人口比例平均值。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\naverage_ratios = df_population_ratio.loc[:, '城市人口比例:全球':'城市人口比例:印度尼西亚'].mean()\n\nprint(average_ratios)"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。计算全球1990年至2019年的城市人口比例标准差。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nglobal_ratio_std = df_population_ratio['城市人口比例：全球'].std()\n\nprint(f\"全球1990年至2019年的城市人口比例标准差为：{global_ratio_std:.2f}\")"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。画出全球从1990年至2019年的城市人口比例变化趋势折线图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nplt.plot(df_population_ratio['时间'], df_population_ratio['城市人口比例：全球'], marker='o', linestyle='-', color='b')\nplt.xlabel('年份')\nplt.ylabel('城市人口比例')\nplt.title('全球1990年至2019年城市人口比例变化趋势折线图')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。画出美国从1990年至2019年的城市人口比例变化趋势柱状图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nplt.bar(df_population_ratio['时间'], df_population_ratio['城市人口比例:美国'], color='skyblue')\nplt.xlabel('年份')\nplt.ylabel('城市人口比例')\nplt.title('美国1990年至2019年城市人口比例变化趋势柱状图')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。查询并输出2005年时，亚洲各国的城市人口比例。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nasia_population_ratio_2005 = df_population_ratio[df_population_ratio['时间'] == 2005][['城市人口比例:中国', '城市人口比例:印度', '城市人口比例:印度尼西亚']]\n\nprint(asia_population_ratio_2005)"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。计算亚洲各国2000年至2010年的城市人口比例均值。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nasia_ratio_mean_2000_to_2010 = df_population_ratio[df_population_ratio['时间'].between(2000, 2010)][['城市人口比例:中国', '城市人口比例:印度', '城市人口比例:印度尼西亚']].mean()\n\nprint(asia_ratio_mean_2000_to_2010)"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。画出中国2005年至2015年的城市人口比例变化趋势折线图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nchina_population_ratio_2005_to_2015 = df_population_ratio[df_population_ratio['时间'].between(2005, 2015)]['城市人口比例:中国']\n\nplt.plot(df_population_ratio[df_population_ratio['时间'].between(2005, 2015)]['时间'], china_population_ratio_2005_to_2015, marker='o', linestyle='-', color='r')\nplt.xlabel('年份')\nplt.ylabel('城市人口比例')\nplt.title('中国2005年至2015年城市人口比例变化趋势折线图')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。画出印度2010年至2019年的城市人口比例变化趋势柱状图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nindia_population_ratio_2010_to_2019 = df_population_ratio[df_population_ratio['时间'].between(2010, 2019)]['城市人口比例:印度']\n\nplt.bar(df_population_ratio[df_population_ratio['时间'].between(2010, 2019)]['时间'], india_population_ratio_2010_to_2019, color='g')\nplt.xlabel('年份')\nplt.ylabel('城市人口比例')\nplt.title('印度2010年至2019年城市人口比例变化趋势柱状图')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。画出全球2000年至2010年的城市人口比例变化趋势面积图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nplt.fill_between(df_population_ratio[df_population_ratio['时间'].between(2000, 2010)]['时间'],\n                 df_population_ratio[df_population_ratio['时间'].between(2000, 2010)]['城市人口比例:全球'],\n                 color='skyblue', alpha=0.4)\nplt.plot(df_population_ratio[df_population_ratio['时间'].between(2000, 2010)]['时间'],\n         df_population_ratio[df_population_ratio['时间'].between(2000, 2010)]['城市人口比例:全球'], marker='o', linestyle='-', color='b')\nplt.xlabel('年份')\nplt.ylabel('城市人口比例')\nplt.title('全球2000年至2010年城市人口比例变化趋势面积图')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。计算2019年亚洲各国城市人口比例的占比并画出饼图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nasia_ratio_percentage_2019 = df_population_ratio[df_population_ratio['时间'] == 2019][['城市人口比例:中国', '城市人口比例:印度', '城市人口比例:印度尼西亚']]\n\nplt.pie(asia_ratio_percentage_2019.values.flatten(), labels=asia_ratio_percentage_2019.columns, autopct='%1.1f%%')\nplt.title('2019年亚洲各国城市人口比例占比饼图')\nplt.axis('equal')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。查询2015年中国的城市人口比例并计算其与2010年的增长率。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nchina_ratio_2015 = df_population_ratio[(df_population_ratio['时间'] == 2015) & (df_population_ratio['城市人口比例:中国'].notna())]['城市人口比例:中国'].values[0]\nchina_ratio_2010 = df_population_ratio[(df_population_ratio['时间'] == 2010) & (df_population_ratio['城市人口比例:中国'].notna())]['城市人口比例:中国'].values[0]\n\ngrowth_rate = ((china_ratio_2015 - china_ratio_2010) \/ china_ratio_2010) * 100\n\nprint(f'2015年中国城市人口比例为：{china_ratio_2015}%')\nprint(f'2010年中国城市人口比例为：{china_ratio_2010}%')\nprint(f'2015年与2010年之间的增长率为：{growth_rate:.2f}%')"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。查询2010年至2019年德国的城市人口比例并计算其变化趋势。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\ngermany_ratio_2010_to_2019 = df_population_ratio[df_population_ratio['时间'].between(2010, 2019)]['城市人口比例:德国']\n\nplt.plot(df_population_ratio[df_population_ratio['时间'].between(2010, 2019)]['时间'],\n         germany_ratio_2010_to_2019, marker='o', linestyle='-', color='b')\nplt.xlabel('年份')\nplt.ylabel('城市人口比例')\nplt.title('2010年至2019年德国城市人口比例变化趋势图')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。查询2019年日本和中国的城市人口比例并比较两国的数据。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\njapan_ratio_2019 = df_population_ratio[(df_population_ratio['时间'] == 2019) & (df_population_ratio['城市人口比例:日本'].notna())]['城市人口比例:日本'].values[0]\nchina_ratio_2019 = df_population_ratio[(df_population_ratio['时间'] == 2019) & (df_population_ratio['城市人口比例:中国'].notna())]['城市人口比例:中国'].values[0]\n\nprint(f'2019年日本城市人口比例为：{japan_ratio_2019}%')\nprint(f'2019年中国城市人口比例为：{china_ratio_2019}%')"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。查询中国和印度在2015年的城市人口比例，并比较两国数据。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\nchina_ratio_2015 = df_population_ratio[(df_population_ratio['时间'] == 2015) & (df_population_ratio['城市人口比例:中国'].notna())]['城市人口比例:中国'].values[0]\nindia_ratio_2015 = df_population_ratio[(df_population_ratio['时间'] == 2015) & (df_population_ratio['城市人口比例:印度'].notna())]['城市人口比例:印度'].values[0]\n\nprint(f'2015年中国城市人口比例为：{china_ratio_2015}%')\nprint(f'2015年印度城市人口比例为：{india_ratio_2015}%')\nif china_ratio_2015 > india_ratio_2015:\n    print('中国的城市人口比例大于印度')\nelif china_ratio_2015 < india_ratio_2015:\n    print('印度的城市人口比例大于中国')\nelse:\n    print('中国和印度的城市人口比例相同')"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例：全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。请绘制全球各国家2005年和2015年城市人口比例的堆叠柱状图。","response":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\n# 提取全球各国家的数据，选择2005年和2015年的数据\ndf_global_selected = df_population_ratio[df_population_ratio['时间'].isin([2005, 2015])][['时间', '城市人口比例：全球', '城市人口比例:美国', '城市人口比例:德国',\n                                                                                       '城市人口比例:英国', '城市人口比例:日本', '城市人口比例:中国',\n                                                                                       '城市人口比例:印度', '城市人口比例:印度尼西亚']]\n\n# 设置“时间”为索引\ndf_global_selected.set_index('时间', inplace=True)\n\n# 绘制堆叠柱状图\ndf_global_selected.T.plot(kind='bar', stacked=True, figsize=(14, 8))\nplt.title('全球各国家2005年和2015年城市人口比例的堆叠柱状图')\nplt.xlabel('国家')\nplt.ylabel('城市人口比例(%)')\nplt.legend(title='年份')\nplt.show()"}
{"prompt":"在“城市人口比例(%)_1990-2019.xlsx”文件中，“城市人口比例”sheet的列名从第一行开始，列名包含“时间”、“城市人口比例:全球”、“城市人口比例:美国”、“城市人口比例:德国”、“城市人口比例:英国”、“城市人口比例:日本”、“城市人口比例:中国”、“城市人口比例:印度”、“城市人口比例:印度尼西亚”。“时间”一列有2019、2018、2017、…，一直到1990等项。找出2015年城市人口比例最高的三个国家并输出。","response":"import pandas as pd\n\nfile_name = '城市人口比例(%)_1990-2019.xlsx'\ndf_population_ratio = pd.read_excel(file_name, sheet_name='城市人口比例', engine='openpyxl', header=0)\n\ncountries_below_global_2015 = df_population_ratio[(df_population_ratio['时间'] == 2015) &\n                                                  (df_population_ratio['城市人口比例:全球'] > df_population_ratio['城市人口比例:全球'])][\n    ['城市人口比例:全球', '城市人口比例:美国', '城市人口比例:德国', '城市人口比例:英国', '城市人口比例:日本', '城市人口比例:中国', '城市人口比例:印度', '城市人口比例:印度尼西亚']]\n\nprint(f'2015年城市人口比例低于全球城市人口比例的国家有：\\n{countries_below_global_2015}')"}